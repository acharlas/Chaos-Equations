name: CI/CD for Chaos Simulation

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # Runs weekly on Sunday at midnight

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect Package Manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore Build Cache
        uses: actions/cache@v4
        with:
          path: |
            build
            node_modules
          key: ${{ runner.os }}-${{ steps.detect-package-manager.outputs.manager }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-build

      - name: Install Dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Lint
        run: yarn lint
        if: ${{ steps.detect-package-manager.outputs.manager == 'yarn' }}

      - name: Test
        run: yarn test --coverage
        if: ${{ steps.detect-package-manager.outputs.manager == 'yarn' }}
        env:
          CI: true

      - name: Build
        run: |
          if [ "${{ steps.detect-package-manager.outputs.manager }}" == "yarn" ]; then
            yarn build
          else
            npm run build
          fi

      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Adjust 'build' if your build output folder is named differently (e.g. 'dist')
          path: ./build

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' # Only deploy on main branch
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
